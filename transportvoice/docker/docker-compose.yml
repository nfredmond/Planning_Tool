version: '3.9'

services:
  # MongoDB Database service
  mongo:
    image: mongo:7.0
    container_name: transportvoice-mongo
    restart: always
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - transportvoice-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Backend API service
  server:
    build:
      context: ..
      dockerfile: docker/Dockerfile.server
    container_name: transportvoice-server
    restart: always
    ports:
      - "${SERVER_PORT:-5000}:5000"
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-5000}
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongo:27017/transportvoice}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CLIENT_URL=${CLIENT_URL:-http://localhost:${CLIENT_PORT:-3000}}
    volumes:
      - ../server:/app
      - ../*.py:/app/
      - ../requirements.txt:/app/requirements.txt
      - /app/node_modules
    networks:
      - transportvoice-network

  # Frontend client service
  client:
    build:
      context: ..
      dockerfile: docker/Dockerfile.client
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:${SERVER_PORT:-5000}/api}
        - REACT_APP_MAPBOX_ACCESS_TOKEN=${REACT_APP_MAPBOX_ACCESS_TOKEN}
        - REACT_APP_ENVIRONMENT=${NODE_ENV:-development}
        - REACT_APP_ENABLE_AI_FEATURES=${REACT_APP_ENABLE_AI_FEATURES:-true}
        - REACT_APP_ENABLE_VOICE_COMMENTS=${REACT_APP_ENABLE_VOICE_COMMENTS:-true}
        - REACT_APP_ENABLE_ANALYTICS=${REACT_APP_ENABLE_ANALYTICS:-true}
        - REACT_APP_GA_TRACKING_ID=${REACT_APP_GA_TRACKING_ID}
        - REACT_APP_GEMINI_API_KEY=${GEMINI_API_KEY}
    container_name: transportvoice-client
    restart: always
    ports:
      - "${CLIENT_PORT:-3000}:80"
    depends_on:
      server:
        condition: service_started
    networks:
      - transportvoice-network
      
  # Nginx service (for production)
  nginx:
    image: nginx:stable-alpine
    container_name: transportvoice-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - client
      - server
    networks:
      - transportvoice-network
    profiles:
      - production
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    command: /bin/sh -c "envsubst '$$DOMAIN_NAME' < /etc/nginx/conf.d/production.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
      
  # Certbot service for SSL certificates (for production)
  certbot:
    image: certbot/certbot
    container_name: transportvoice-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    profiles:
      - production
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}

# Volumes
volumes:
  mongo_data:
    driver: local

# Networks
networks:
  transportvoice-network:
    driver: bridge 